CREATE OR REPLACE PACKAGE BODY TRON2000.dc_k_fpsl_a1004810_trn
AS
    /**
    || Acceso a la tabla a1004810
    ||
    || Procedimientos y funciones para el acceso de la tabla a1004810
    */

    --
    /* -------------------- VERSION = 1.00 -------------------- */
    --
    /* -------------------- MODIFICACIONES --------------------
    || 2020/01/22  - TRON2000 - v 1.00
    ||         Creacion del Package
    */ --------------------------------------------------------
    --
    --
    /* --------------------------------------------------
    || Aqui comienza la declaracion de variables GLOBALES
    */ --------------------------------------------------
    --
    greg a1004810%ROWTYPE;
    --
    g_existe BOOLEAN := FALSE;
    --
    g_cod_mensaje_cp g1010020.cod_mensaje%TYPE;
    --
    g_anx_mensaje VARCHAR2(100);
    --
    /* ---------------------------------------------------
    || Aqui comienza la declaracion de constantes GLOBALES
    */ ---------------------------------------------------
    --
    g_k_ini_corchete CONSTANT VARCHAR2(2) := ' [';
    g_k_fin_corchete CONSTANT VARCHAR2(1) := ']';
    --
    --{{ TG_GPRV
    /* -------------------------------------------
    || ! ATENCION ! Codigo PL del usuario
    || Definicion de Globales Privadas al Package
    */ -------------------------------------------
    --
    --}} TG_GPRV
    --
    /* ----------------------------------------------------
    || Aqui comienza la declaracion de subprogramas LOCALES
    */ ----------------------------------------------------
    --
    -- ------------------------------------------------------------
    --
    /**
    || Devuelve el error al llamador
    */
    PROCEDURE pp_devuelve_error
    IS
        l_cod_idioma  g1010010.cod_idioma %TYPE;
    BEGIN
        --
        l_cod_idioma := trn_k_global.cod_idioma;
        --
        IF g_cod_mensaje_cp BETWEEN 20000
                                AND 20999
        THEN
        --
        RAISE_APPLICATION_ERROR(-g_cod_mensaje_cp,
                                ss_k_mensaje.f_texto_idioma(g_cod_mensaje_cp,
                                                            l_cod_idioma ) ||
                                g_anx_mensaje
                                );
        --
    ELSE
        --
        RAISE_APPLICATION_ERROR(-20000,
                                ss_k_mensaje.f_texto_idioma(g_cod_mensaje_cp,
                                                            l_cod_idioma ) ||
                                g_anx_mensaje
                                );
        --
        END IF;
        --
    END pp_devuelve_error;
    --
    -- ------------------------------------------------------------
    --
    /**
    || Comprueba que se haya leido informacion
    */
    PROCEDURE pp_comprueba_error
    IS
    BEGIN
        --
        IF NOT g_existe
        THEN
        --
        g_cod_mensaje_cp := 20001;
        g_anx_mensaje := g_k_ini_corchete || 'PK a1004810' || g_k_fin_corchete;
        --
        pp_devuelve_error;
        --
        END IF;
        --
    END pp_comprueba_error;
    --
    --{{ TG_PPRV
    /* -------------------------------------------
    || ! ATENCION ! Codigo PL del usuario
    || Procedimientos Privados
    */ -------------------------------------------
    --
    --}} TG_PPRV
    --
    --
    /* --------------------------------------------------------
    || Aqui comienza la declaracion de subprogramas del PACKAGE
    */ --------------------------------------------------------
        --
        -- ------------------------------------------------------------
    --
    -- ------------------------------------------------------------
    --
    /**
    || Lee un registro por PK
    */
    PROCEDURE p_lee(
                    p_idn_bt          a1004810.idn_bt         %TYPE)
    IS
        --
        CURSOR cl_a1004810   IS
            SELECT *
            FROM a1004810
            WHERE idn_bt          = p_idn_bt
                    ;
        --
    BEGIN
        --
        --
        OPEN        cl_a1004810;
        FETCH       cl_a1004810    INTO greg;
        g_existe := cl_a1004810%FOUND;
        CLOSE       cl_a1004810;
        --
        pp_comprueba_error;
        --
    END p_lee;
    --
    -- ------------------------------------------------------------
    --
    /**
    || Devuelve el valor de la columna idn_bt
    */
    FUNCTION f_idn_bt            RETURN VARCHAR2
    IS
    BEGIN
        --
        pp_comprueba_error;
        --
        RETURN greg.idn_bt;
        --
    END f_idn_bt;
    --
    -- ------------------------------------------------------------
    --
    /**
    || Devuelve el valor de la columna idn_int_proc
    */
    FUNCTION f_idn_int_proc      RETURN NUMBER
    IS
    BEGIN
        --
        pp_comprueba_error;
        --
        RETURN greg.idn_int_proc;
        --
    END f_idn_int_proc;
    --
    -- ------------------------------------------------------------
    --
    /**
    || Devuelve el valor de la columna cod_sis_origen
    */
    FUNCTION f_cod_sis_origen    RETURN VARCHAR2
    IS
    BEGIN
        --
        pp_comprueba_error;
        --
        RETURN greg.cod_sis_origen;
        --
    END f_cod_sis_origen;
    --
    -- ------------------------------------------------------------
    --
    /**
    || Devuelve el valor de la columna fec_registro
    */
    FUNCTION f_fec_registro      RETURN DATE
    IS
    BEGIN
        --
        pp_comprueba_error;
        --
        RETURN greg.fec_registro;
        --
    END f_fec_registro;
    --
    -- ------------------------------------------------------------
    --
    /**
    || Devuelve el valor de la columna txt_mca_bt_rev
    */
    FUNCTION f_txt_mca_bt_rev        RETURN VARCHAR2
    IS
    BEGIN
        --
        pp_comprueba_error;
        --
        RETURN greg.txt_mca_bt_rev;
        --
    END f_txt_mca_bt_rev;
    --
    -- ------------------------------------------------------------
    --
    /**
    || Devuelve el valor de la columna idn_bt_rev
    */
    FUNCTION f_idn_bt_rev        RETURN VARCHAR2
    IS
    BEGIN
        --
        pp_comprueba_error;
        --
        RETURN greg.idn_bt_rev;
        --
    END f_idn_bt_rev;
    --
    -- ------------------------------------------------------------
    --
    /**
    || Devuelve el valor de la columna fec_ctable
    */
    FUNCTION f_fec_ctable        RETURN DATE
    IS
    BEGIN
        --
        pp_comprueba_error;
        --
        RETURN greg.fec_ctable;
        --
    END f_fec_ctable;
    --
    -- ------------------------------------------------------------
    --
    /**
    || Devuelve el valor de la columna fec_valor
    */
    FUNCTION f_fec_valor         RETURN DATE
    IS
    BEGIN
        --
        pp_comprueba_error;
        --
        RETURN greg.fec_valor;
        --
    END f_fec_valor;
    --
    -- ------------------------------------------------------------
    --
    /**
    || Devuelve el valor de la columna idn_fichero
    */
    FUNCTION f_idn_fichero       RETURN VARCHAR2
    IS
    BEGIN
        --
        pp_comprueba_error;
        --
        RETURN greg.idn_fichero;
        --
    END f_idn_fichero;
    --
    -- ------------------------------------------------------------
    --
    /**
    || Devuelve el valor de la columna txt_num_externo
    */
    FUNCTION f_txt_num_externo   RETURN VARCHAR2
    IS
    BEGIN
        --
        pp_comprueba_error;
        --
        RETURN greg.txt_num_externo;
        --
    END f_txt_num_externo;
    --
    -- ------------------------------------------------------------
    --
    /**
    || Devuelve el valor de la columna imp_transaccion
    */
    FUNCTION f_imp_transaccion   RETURN NUMBER
    IS
    BEGIN
        --
        pp_comprueba_error;
        --
        RETURN greg.imp_transaccion;
        --
    END f_imp_transaccion;
    --
    -- ------------------------------------------------------------
    --
    /**
    || Devuelve el valor de la columna cod_mon_iso
    */
    FUNCTION f_cod_mon_iso       RETURN VARCHAR2
    IS
    BEGIN
        --
        pp_comprueba_error;
        --
        RETURN greg.cod_mon_iso;
        --
    END f_cod_mon_iso;
    --
    -- ------------------------------------------------------------
    --
    /**
    || Devuelve el valor de la columna tip_imp
    */
    FUNCTION f_tip_imp           RETURN VARCHAR2
    IS
    BEGIN
        --
        pp_comprueba_error;
        --
        RETURN greg.tip_imp;
        --
    END f_tip_imp;
    --
    -- ------------------------------------------------------------
    --
    /**
    || Devuelve el valor de la columna idn_cobertura
    */
    FUNCTION f_idn_cobertura     RETURN VARCHAR2
    IS
    BEGIN
        --
        pp_comprueba_error;
        --
        RETURN greg.idn_cobertura;
        --
    END f_idn_cobertura;
    --
    -- ------------------------------------------------------------
    --
    /**
    || Devuelve el valor de la columna idn_bt_ref
    */
    FUNCTION f_idn_bt_ref        RETURN VARCHAR2
    IS
    BEGIN
        --
        pp_comprueba_error;
        --
        RETURN greg.idn_bt_ref;
        --
    END f_idn_bt_ref;
    --
    -- ------------------------------------------------------------
    --
    /**
    || Devuelve el valor de la columna tip_bt
    */
    FUNCTION f_tip_bt            RETURN VARCHAR2
    IS
    BEGIN
        --
        pp_comprueba_error;
        --
        RETURN greg.tip_bt;
        --
    END f_tip_bt;
    --
    -- ------------------------------------------------------------
    --
    /**
    || Devuelve el valor de la columna imp_impuesto
    */
    FUNCTION f_imp_impuesto      RETURN NUMBER
    IS
    BEGIN
        --
        pp_comprueba_error;
        --
        RETURN greg.imp_impuesto;
        --
    END f_imp_impuesto;
    --
    -- ------------------------------------------------------------
    --
    /**
    || Inserta un registro en la tabla
    */
    PROCEDURE p_inserta(p_reg a1004810%ROWTYPE)
    IS
    BEGIN
        --
        INSERT INTO a1004810
        VALUES p_reg;
        --
        --
    END p_inserta;
    --
    -- ------------------------------------------------------------
    --
    /**
    || Inserta el registro pasado como parametro y devuelve el ROWID
    */
    FUNCTION f_inserta(p_reg      IN    a1004810%ROWTYPE)
        --
    RETURN ROWID
    IS
        --
        v_clave     ROWID;
        --
    BEGIN
        --
        INSERT INTO a1004810
            VALUES p_reg
            RETURNING ROWID INTO v_clave;
        --
        RETURN  v_clave;
        --
    END f_inserta;
    --
    -- ------------------------------------------------------------
    --
    /**
    || Modifica un registro en la tabla
    */
    PROCEDURE p_actualiza (p_reg a1004810%ROWTYPE)
    IS
    BEGIN
        --
        UPDATE a1004810
            SET   row = p_reg
        WHERE
            idn_bt          = p_reg.idn_bt
            ;
            --
        END p_actualiza;
    --
    -- ------------------------------------------------------------
    --
    /**
    || Modifica un registro en la tabla, por rowid
    */
    PROCEDURE p_actualiza (p_reg a1004810%ROWTYPE,
                            p_rowid         ROWID)
    IS
    BEGIN
        --
        UPDATE a1004810
            SET   row = p_reg
        WHERE ROWID = p_rowid;
        --
    END p_actualiza;
    --
    -- ------------------------------------------------------------
    --
    /**
    || Devuelve el registro completo
    */
    FUNCTION f_devuelve_reg RETURN a1004810%ROWTYPE
    IS
    BEGIN
        --
        pp_comprueba_error;
        --
        RETURN greg;
        --
        END f_devuelve_reg;
    --
    --{{ TG_PPUB
    /* -------------------------------------------
    || ! ATENCION ! Codigo PL del usuario
    || Procedimientos Publicos
    */ -------------------------------------------
    --
    --}} TG_PPUB
    --
    --
END dc_k_fpsl_a1004810_trn;
/