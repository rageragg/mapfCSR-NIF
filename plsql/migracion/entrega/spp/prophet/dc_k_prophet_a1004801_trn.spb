CREATE OR REPLACE PACKAGE BODY TRON2000.dc_k_prophet_a1004801_trn

AS
/**
|| Acceso a la tabla a1004801
|| 
|| Procedimientos y funciones para el acceso de la tabla a1004801
*/
--
/* -------------------- VERSION = 1.01 -------------------- */
--
/* -------------------- MODIFICACIONES -------------------- 
|| 2020/03/25  - TRON2000 - v 1.01 
|| Nueva funcion para retornar nueva columna idn_lic_lrc
*/ --------------------------------------------------------
--
   --
   /* --------------------------------------------------
   || Aqui comienza la declaracion de variables GLOBALES
   */ --------------------------------------------------
   --
   greg a1004801%ROWTYPE;
   --
   g_existe BOOLEAN := FALSE;
   --
   g_cod_mensaje_cp g1010020.cod_mensaje%TYPE;
   --
   g_anx_mensaje VARCHAR2(100);
   --
   /* ---------------------------------------------------
   || Aqui comienza la declaracion de constantes GLOBALES
   */ ---------------------------------------------------
   --
   g_k_ini_corchete CONSTANT VARCHAR2(2) := ' [';
   g_k_fin_corchete CONSTANT VARCHAR2(1) := ']';
   --
   --{{ TG_GPRV
   /* -------------------------------------------
   || ! ATENCION ! Codigo PL del usuario         
   || Definicion de Globales Privadas al Package
   */ -------------------------------------------
   --
   --}} TG_GPRV
   --
   --
   /* ----------------------------------------------------
   || Aqui comienza la declaracion de subprogramas LOCALES
   */ ----------------------------------------------------
   --
   -- ------------------------------------------------------------
   --
   /**
   || Devuelve el error al llamador
   */
   PROCEDURE pp_devuelve_error
   IS
    l_cod_idioma  g1010010.cod_idioma %TYPE;
   BEGIN
    --
    l_cod_idioma := trn_k_global.cod_idioma;
    --
    IF g_cod_mensaje_cp BETWEEN 20000
                            AND 20999
    THEN
       --
       RAISE_APPLICATION_ERROR(-g_cod_mensaje_cp,
                             ss_k_mensaje.f_texto_idioma(g_cod_mensaje_cp,
                                                         l_cod_idioma ) ||
                             g_anx_mensaje
                            );
       --
   ELSE
       --
     RAISE_APPLICATION_ERROR(-20000,
                             ss_k_mensaje.f_texto_idioma(g_cod_mensaje_cp,
                                                         l_cod_idioma ) ||
                             g_anx_mensaje
                            );
       --
    END IF;
    --
   END pp_devuelve_error;
   --
   -- ------------------------------------------------------------
   --
   /**
   || Comprueba que se haya leido informacion
   */
   PROCEDURE pp_comprueba_error
   IS
   BEGIN
    --
    IF NOT g_existe
    THEN
       --
       g_cod_mensaje_cp := 20001;
       g_anx_mensaje := g_k_ini_corchete || 'PK a1004801' || g_k_fin_corchete;
       --
       pp_devuelve_error;
       --
    END IF;
    --
   END pp_comprueba_error;
   --
   --{{ TG_PPRV
   /* -------------------------------------------
   || ! ATENCION ! Codigo PL del usuario         
   || Procedimientos Privados
   */ -------------------------------------------
   --
   --}} TG_PPRV
   --
   --
   /* --------------------------------------------------------
   || Aqui comienza la declaracion de subprogramas del PACKAGE
   */ --------------------------------------------------------
    --
    -- ------------------------------------------------------------
   --
   -- ------------------------------------------------------------
   --
   /**
   || Lee un registro por PK
   */
   PROCEDURE p_lee(
                 p_cod_sociedad        a1004801.cod_sociedad       %TYPE,
                 p_cod_ramo            a1004801.cod_ramo           %TYPE,
                 p_cod_mon             a1004801.cod_mon            %TYPE,
                 p_cod_kmodalidad      a1004801.cod_kmodalidad     %TYPE)
   IS
    --
    CURSOR cl_a1004801   IS
         SELECT *
           FROM a1004801
          WHERE cod_sociedad        = p_cod_sociedad       
            AND cod_ramo            = p_cod_ramo           
            AND cod_mon             IN (p_cod_mon,dc.cod_mon_gen)           
            AND cod_kmodalidad      = p_cod_kmodalidad     
                ;
    --
   BEGIN
    --
    --
    OPEN        cl_a1004801;
    FETCH       cl_a1004801    INTO greg;
    g_existe := cl_a1004801%FOUND;
    CLOSE       cl_a1004801;
    --
    pp_comprueba_error;
    --
   END p_lee;
   --
   -- ------------------------------------------------------------
   --
   /**
   || Devuelve el valor de la columna cod_sociedad
   */
   FUNCTION f_cod_sociedad          RETURN VARCHAR2
   IS
   BEGIN
      --
      pp_comprueba_error;
      --
      RETURN greg.cod_sociedad;
      --
   END f_cod_sociedad;
   --
   -- ------------------------------------------------------------
   --
   /**
   || Devuelve el valor de la columna cod_ramo
   */
   FUNCTION f_cod_ramo              RETURN NUMBER
   IS
   BEGIN
      --
      pp_comprueba_error;
      --
      RETURN greg.cod_ramo;
      --
   END f_cod_ramo;
   --
   -- ------------------------------------------------------------
   --
   /**
   || Devuelve el valor de la columna cod_mon
   */
   FUNCTION f_cod_mon               RETURN NUMBER
   IS
   BEGIN
      --
      pp_comprueba_error;
      --
      RETURN greg.cod_mon;
      --
   END f_cod_mon;
   --
   -- ------------------------------------------------------------
   --
   /**
   || Devuelve el valor de la columna cod_kmodalidad
   */
   FUNCTION f_cod_kmodalidad        RETURN VARCHAR2
   IS
   BEGIN
      --
      pp_comprueba_error;
      --
      RETURN greg.cod_kmodalidad;
      --
   END f_cod_kmodalidad;
   --
   -- ------------------------------------------------------------
   --
   /**
   || Devuelve el valor de la columna txt_kproducto
   */
   FUNCTION f_txt_kproducto         RETURN VARCHAR2
   IS
   BEGIN
      --
      pp_comprueba_error;
      --
      RETURN greg.txt_kproducto;
      --
   END f_txt_kproducto;
   --
   -- ------------------------------------------------------------
   --
   /**
   || Devuelve el valor de la columna txt_ksubproducto
   */
   FUNCTION f_txt_ksubproducto      RETURN VARCHAR2
   IS
   BEGIN
      --
      pp_comprueba_error;
      --
      RETURN greg.txt_ksubproducto;
      --
   END f_txt_ksubproducto;
   --
   -- ------------------------------------------------------------
   --
   /**
   || Devuelve el valor de la columna txt_cnegocio
   */
   FUNCTION f_txt_cnegocio          RETURN VARCHAR2
   IS
   BEGIN
      --
      pp_comprueba_error;
      --
      RETURN greg.txt_cnegocio;
      --
   END f_txt_cnegocio;
   --
   -- ------------------------------------------------------------
   --
   /**
   || Devuelve el valor de la columna txt_gap_act
   */
   FUNCTION f_txt_gap_act           RETURN VARCHAR2
   IS
   BEGIN
      --
      pp_comprueba_error;
      --
      RETURN greg.txt_gap_act;
      --
   END f_txt_gap_act;
   --
   -- ------------------------------------------------------------
   --
   /**
   || Devuelve el valor de la columna txt_basecalcucom1
   */
   FUNCTION f_txt_basecalcucom1     RETURN VARCHAR2
   IS
   BEGIN
      --
      pp_comprueba_error;
      --
      RETURN greg.txt_basecalcucom1;
      --
   END f_txt_basecalcucom1;
   --
   -- ------------------------------------------------------------
   --
   /**
   || Devuelve el valor de la columna txt_basecalcucom2
   */
   FUNCTION f_txt_basecalcucom2     RETURN VARCHAR2
   IS
   BEGIN
      --
      pp_comprueba_error;
      --
      RETURN greg.txt_basecalcucom2;
      --
   END f_txt_basecalcucom2;
   --
   -- ------------------------------------------------------------
   --
   /**
   || Devuelve el valor de la columna txt_basecalcucom3
   */
   FUNCTION f_txt_basecalcucom3     RETURN VARCHAR2
   IS
   BEGIN
      --
      pp_comprueba_error;
      --
      RETURN greg.txt_basecalcucom3;
      --
   END f_txt_basecalcucom3;
   --
   -- ------------------------------------------------------------
   --
   /**
   || Devuelve el valor de la columna txt_tipoprima1
   */
   FUNCTION f_txt_tipoprima1        RETURN VARCHAR2
   IS
   BEGIN
      --
      pp_comprueba_error;
      --
      RETURN greg.txt_tipoprima1;
      --
   END f_txt_tipoprima1;
   --
   -- ------------------------------------------------------------
   --
   /**
   || Devuelve el valor de la columna txt_tipoprima2
   */
   FUNCTION f_txt_tipoprima2        RETURN VARCHAR2
   IS
   BEGIN
      --
      pp_comprueba_error;
      --
      RETURN greg.txt_tipoprima2;
      --
   END f_txt_tipoprima2;
   --
   -- ------------------------------------------------------------
   --
   /**
   || Devuelve el valor de la columna txt_tipoprima3
   */
   FUNCTION f_txt_tipoprima3        RETURN VARCHAR2
   IS
   BEGIN
      --
      pp_comprueba_error;
      --
      RETURN greg.txt_tipoprima3;
      --
   END f_txt_tipoprima3;
   --
   -- ------------------------------------------------------------
   --
   /**
   || Devuelve el valor de la columna num_npericomi1
   */
   FUNCTION f_num_npericomi1        RETURN NUMBER
   IS
   BEGIN
      --
      pp_comprueba_error;
      --
      RETURN greg.num_npericomi1;
      --
   END f_num_npericomi1;
   --
   -- ------------------------------------------------------------
   --
   /**
   || Devuelve el valor de la columna num_npericomi2
   */
   FUNCTION f_num_npericomi2        RETURN NUMBER
   IS
   BEGIN
      --
      pp_comprueba_error;
      --
      RETURN greg.num_npericomi2;
      --
   END f_num_npericomi2;
   --
   -- ------------------------------------------------------------
   --
   /**
   || Devuelve el valor de la columna num_npericomi3
   */
   FUNCTION f_num_npericomi3        RETURN NUMBER
   IS
   BEGIN
      --
      pp_comprueba_error;
      --
      RETURN greg.num_npericomi3;
      --
   END f_num_npericomi3;
   --
   -- ------------------------------------------------------------
   --
   /**
   || Devuelve el valor de la columna txt_temp_vit
   */
   FUNCTION f_txt_temp_vit          RETURN VARCHAR2
   IS
   BEGIN
      --
      pp_comprueba_error;
      --
      RETURN greg.txt_temp_vit;
      --
   END f_txt_temp_vit;
   --
   -- ------------------------------------------------------------
   --
   /**
   || Devuelve el valor de la columna num_rentin
   */
   FUNCTION f_num_rentin            RETURN NUMBER
   IS
   BEGIN
      --
      pp_comprueba_error;
      --
      RETURN greg.num_rentin;
      --
   END f_num_rentin;
   --
   -- ------------------------------------------------------------
   --
   /**
   || Devuelve el valor de la columna num_rentmin
   */
   FUNCTION f_num_rentmin           RETURN NUMBER
   IS
   BEGIN
      --
      pp_comprueba_error;
      --
      RETURN greg.num_rentmin;
      --
   END f_num_rentmin;
   --
   -- ------------------------------------------------------------
   --
   /**
   || Devuelve el valor de la columna num_prevrenta
   */
   FUNCTION f_num_prevrenta         RETURN NUMBER
   IS
   BEGIN
      --
      pp_comprueba_error;
      --
      RETURN greg.num_prevrenta;
      --
   END f_num_prevrenta;
   --
   -- ------------------------------------------------------------
   --
   /**
   || Devuelve el valor de la columna num_preversion
   */
   FUNCTION f_num_preversion        RETURN NUMBER
   IS
   BEGIN
      --
      pp_comprueba_error;
      --
      RETURN greg.num_preversion;
      --
   END f_num_preversion;
   --
   -- ------------------------------------------------------------
   --
   /**
   || Devuelve el valor de la columna num_npergaran
   */
   FUNCTION f_num_npergaran         RETURN NUMBER
   IS
   BEGIN
      --
      pp_comprueba_error;
      --
      RETURN greg.num_npergaran;
      --
   END f_num_npergaran;
   --
   -- ------------------------------------------------------------
   --
   /**
   || Devuelve el valor de la columna num_nadifer
   */
   FUNCTION f_num_nadifer           RETURN NUMBER
   IS
   BEGIN
      --
      pp_comprueba_error;
      --
      RETURN greg.num_nadifer;
      --
   END f_num_nadifer;
   --
   -- ------------------------------------------------------------
   --
   /**
   || Devuelve el valor de la columna txt_cforma_revrenta
   */
   FUNCTION f_txt_cforma_revrenta   RETURN VARCHAR2
   IS
   BEGIN
      --
      pp_comprueba_error;
      --
      RETURN greg.txt_cforma_revrenta;
      --
   END f_txt_cforma_revrenta;
   --
   -- ------------------------------------------------------------
   --
   /**
   || Devuelve el valor de la columna txt_indicrescate
   */
   FUNCTION f_txt_indicrescate      RETURN VARCHAR2
   IS
   BEGIN
      --
      pp_comprueba_error;
      --
      RETURN greg.txt_indicrescate;
      --
   END f_txt_indicrescate;
   --
   -- ------------------------------------------------------------
   --
   /**
   || Devuelve el valor de la columna txt_cod_rm
   */
   FUNCTION f_txt_cod_rm            RETURN VARCHAR2
   IS
   BEGIN
      --
      pp_comprueba_error;
      --
      RETURN greg.txt_cod_rm;
      --
   END f_txt_cod_rm;
   --
   -- ------------------------------------------------------------
   --
   /**
   || Devuelve el valor de la columna cod_usr
   */
   FUNCTION f_cod_usr               RETURN VARCHAR2
   IS
   BEGIN
      --
      pp_comprueba_error;
      --
      RETURN greg.cod_usr;
      --
   END f_cod_usr;
   --
   -- ------------------------------------------------------------
   --
   /**
   || Devuelve el valor de la columna fec_actu
   */
   FUNCTION f_fec_actu              RETURN DATE
   IS
   BEGIN
      --
      pp_comprueba_error;
      --
      RETURN greg.fec_actu;
      --
   END f_fec_actu;
   --
   -- ------------------------------------------------------------
   --
   /**
   || Devuelve el valor de la columna : IDN_LIC_LRC
   */
   FUNCTION f_idn_lic_lrc           RETURN VARCHAR2
   IS
   BEGIN
      --
      pp_comprueba_error;
      --
      RETURN greg.idn_lic_lrc;
      --
   END f_idn_lic_lrc;
   --
   --
   -- ------------------------------------------------------------
   --
   /**
   || Inserta un registro en la tabla
   */
   PROCEDURE p_inserta(p_reg a1004801%ROWTYPE)
   IS
   BEGIN
      --
      INSERT INTO a1004801
      VALUES p_reg;
      --
    --
   END p_inserta;
   --
   -- ------------------------------------------------------------
   --
   /**
   || Inserta el registro pasado como parametro y devuelve el ROWID
   */
   FUNCTION f_inserta(p_reg      IN    a1004801%ROWTYPE)
    --
   RETURN ROWID
   IS
      --
      v_clave     ROWID;
      --
   BEGIN
      --
      INSERT INTO a1004801
           VALUES p_reg
        RETURNING ROWID INTO v_clave;
      --
      RETURN  v_clave;
      --
   END f_inserta;
   --
   -- ------------------------------------------------------------
   --
   /**
   || Modifica un registro en la tabla
   */
   PROCEDURE p_actualiza (p_reg a1004801%ROWTYPE)
   IS
   BEGIN
      --
      UPDATE a1004801
         SET   row = p_reg  
     WHERE 
           cod_sociedad        = p_reg.cod_sociedad       
       AND cod_ramo            = p_reg.cod_ramo           
       AND cod_mon             = p_reg.cod_mon            
       AND cod_kmodalidad      = p_reg.cod_kmodalidad     
          ;
        --
    END p_actualiza;
   --
   -- ------------------------------------------------------------
   --
   /**
   || Modifica un registro en la tabla, por rowid
   */
   PROCEDURE p_actualiza (p_reg a1004801%ROWTYPE,
                        p_rowid         ROWID)
   IS
   BEGIN
      --
      UPDATE a1004801
         SET   row = p_reg     
      WHERE ROWID = p_rowid; 
      --
   END p_actualiza;
   --
   -- ------------------------------------------------------------
   --
   /**
   || Devuelve el registro completo
   */
   FUNCTION f_devuelve_reg RETURN a1004801%ROWTYPE
   IS
   BEGIN
       --
       pp_comprueba_error;
       --
       RETURN greg;
    --
    END f_devuelve_reg;
   --
   --{{ TG_PPUB
   /* -------------------------------------------
   || ! ATENCION ! Codigo PL del usuario         
   || Procedimientos Publicos
   */ -------------------------------------------
   --
   --}} TG_PPUB
   --
   --
END dc_k_prophet_a1004801_trn;
/