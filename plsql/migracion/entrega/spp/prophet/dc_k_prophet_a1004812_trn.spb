CREATE OR REPLACE PACKAGE BODY TRON2000.dc_k_prophet_a1004812_trn
AS
/**
|| Acceso a la tabla a1004812
|| 
|| Procedimientos y funciones para el acceso de la tabla a1004812
*/
  
--
/* -------------------- VERSION = 1.00 -------------------- */
--
/* -------------------- MODIFICACIONES -------------------- 
|| 2020/02/05  - TRON2000 - v 1.00 
||         Creacion del Package
*/ --------------------------------------------------------
--
   --
   /* --------------------------------------------------
   || Aqui comienza la declaracion de variables GLOBALES
   */ --------------------------------------------------
   --
   greg a1004812%ROWTYPE;
   --
   g_existe BOOLEAN := FALSE;
   --
   g_cod_mensaje_cp g1010020.cod_mensaje%TYPE;
   --
   g_anx_mensaje VARCHAR2(100);
   --
   /* ---------------------------------------------------
   || Aqui comienza la declaracion de constantes GLOBALES
   */ ---------------------------------------------------
   --
   g_k_ini_corchete CONSTANT VARCHAR2(2) := ' [';
   g_k_fin_corchete CONSTANT VARCHAR2(1) := ']';
   --
   --{{ TG_GPRV
   /* -------------------------------------------
   || ! ATENCION ! Codigo PL del usuario         
   || Definicion de Globales Privadas al Package
   */ -------------------------------------------
   --
   --}} TG_GPRV
   --
   --
   /* ----------------------------------------------------
   || Aqui comienza la declaracion de subprogramas LOCALES
   */ ----------------------------------------------------
   --
   -- ------------------------------------------------------------
   --
   /**
   || Devuelve el error al llamador
   */
   PROCEDURE pp_devuelve_error
   IS
    l_cod_idioma  g1010010.cod_idioma %TYPE;
   BEGIN
    --
    l_cod_idioma := trn_k_global.cod_idioma;
    --
    IF g_cod_mensaje_cp BETWEEN 20000
                            AND 20999
    THEN
       --
       RAISE_APPLICATION_ERROR(-g_cod_mensaje_cp,
                             ss_k_mensaje.f_texto_idioma(g_cod_mensaje_cp,
                                                         l_cod_idioma ) ||
                             g_anx_mensaje
                            );
       --
   ELSE
       --
     RAISE_APPLICATION_ERROR(-20000,
                             ss_k_mensaje.f_texto_idioma(g_cod_mensaje_cp,
                                                         l_cod_idioma ) ||
                             g_anx_mensaje
                            );
       --
    END IF;
    --
   END pp_devuelve_error;
   --
   -- ------------------------------------------------------------
   --
   /**
   || Comprueba que se haya leido informacion
   */
   PROCEDURE pp_comprueba_error
   IS
   BEGIN
    --
    IF NOT g_existe
    THEN
       --
       g_cod_mensaje_cp := 20001;
       g_anx_mensaje := g_k_ini_corchete || 'PK a1004812' || g_k_fin_corchete;
       --
       pp_devuelve_error;
       --
    END IF;
    --
   END pp_comprueba_error;
   --
   --{{ TG_PPRV
   /* -------------------------------------------
   || ! ATENCION ! Codigo PL del usuario         
   || Procedimientos Privados
   */ -------------------------------------------
   --
   --}} TG_PPRV
   --
   --
   /* --------------------------------------------------------
   || Aqui comienza la declaracion de subprogramas del PACKAGE
   */ --------------------------------------------------------
    --
    -- ------------------------------------------------------------
   --
   -- ------------------------------------------------------------
   --
   /**
   || Lee un registro por PK
   */
   PROCEDURE p_lee(
                 p_idn_int_proc   a1004812.idn_int_proc  %TYPE,
                 p_num_secu_error a1004812.num_secu_error%TYPE)
   IS
    --
    CURSOR cl_a1004812   IS
         SELECT *
           FROM a1004812
          WHERE idn_int_proc   = p_idn_int_proc  
            AND num_secu_error = p_num_secu_error
                ;
    --
   BEGIN
    --
    --
    OPEN        cl_a1004812;
    FETCH       cl_a1004812    INTO greg;
    g_existe := cl_a1004812%FOUND;
    CLOSE       cl_a1004812;
    --
    pp_comprueba_error;
    --
   END p_lee;
   --
   -- ------------------------------------------------------------
   --
   /**
   || Devuelve el valor de la columna idn_int_proc
   */
   FUNCTION f_idn_int_proc     RETURN NUMBER
   IS
   BEGIN
      --
      pp_comprueba_error;
      --
      RETURN greg.idn_int_proc;
      --
   END f_idn_int_proc;
   --
   -- ------------------------------------------------------------
   --
   /**
   || Devuelve el valor de la columna num_secu_error
   */
   FUNCTION f_num_secu_error   RETURN NUMBER
   IS
   BEGIN
      --
      pp_comprueba_error;
      --
      RETURN greg.num_secu_error;
      --
   END f_num_secu_error;
   --
   -- ------------------------------------------------------------
   --
   /**
   || Devuelve el valor de la columna cod_sis_origen
   */
   FUNCTION f_cod_sis_origen   RETURN VARCHAR2
   IS
   BEGIN
      --
      pp_comprueba_error;
      --
      RETURN greg.cod_sis_origen;
      --
   END f_cod_sis_origen;
   --
   -- ------------------------------------------------------------
   --
   /**
   || Devuelve el valor de la columna cod_sociedad
   */
   FUNCTION f_cod_sociedad     RETURN VARCHAR2
   IS
   BEGIN
      --
      pp_comprueba_error;
      --
      RETURN greg.cod_sociedad;
      --
   END f_cod_sociedad;
   --
   -- ------------------------------------------------------------
   --
   /**
   || Devuelve el valor de la columna cod_cia
   */
   FUNCTION f_cod_cia          RETURN NUMBER
   IS
   BEGIN
      --
      pp_comprueba_error;
      --
      RETURN greg.cod_cia;
      --
   END f_cod_cia;
   --
   -- ------------------------------------------------------------
   --
   /**
   || Devuelve el valor de la columna num_poliza
   */
   FUNCTION f_num_poliza       RETURN VARCHAR2
   IS
   BEGIN
      --
      pp_comprueba_error;
      --
      RETURN greg.num_poliza;
      --
   END f_num_poliza;
   --
   -- ------------------------------------------------------------
   --
   /**
   || Devuelve el valor de la columna num_spto
   */
   FUNCTION f_num_spto         RETURN NUMBER
   IS
   BEGIN
      --
      pp_comprueba_error;
      --
      RETURN greg.num_spto;
      --
   END f_num_spto;
   --
   -- ------------------------------------------------------------
   --
   /**
   || Devuelve el valor de la columna num_apli
   */
   FUNCTION f_num_apli         RETURN NUMBER
   IS
   BEGIN
      --
      pp_comprueba_error;
      --
      RETURN greg.num_apli;
      --
   END f_num_apli;
   --
   -- ------------------------------------------------------------
   --
   /**
   || Devuelve el valor de la columna num_spto_apli
   */
   FUNCTION f_num_spto_apli    RETURN NUMBER
   IS
   BEGIN
      --
      pp_comprueba_error;
      --
      RETURN greg.num_spto_apli;
      --
   END f_num_spto_apli;
   --
   -- ------------------------------------------------------------
   --
   /**
   || Devuelve el valor de la columna num_riesgo
   */
   FUNCTION f_num_riesgo       RETURN NUMBER
   IS
   BEGIN
      --
      pp_comprueba_error;
      --
      RETURN greg.num_riesgo;
      --
   END f_num_riesgo;
   --
   -- ------------------------------------------------------------
   --
   /**
   || Devuelve el valor de la columna cod_cob
   */
   FUNCTION f_cod_cob          RETURN NUMBER
   IS
   BEGIN
      --
      pp_comprueba_error;
      --
      RETURN greg.cod_cob;
      --
   END f_cod_cob;
   --
   -- ------------------------------------------------------------
   --
   /**
   || Devuelve el valor de la columna txt_campo
   */
   FUNCTION f_txt_campo        RETURN VARCHAR2
   IS
   BEGIN
      --
      pp_comprueba_error;
      --
      RETURN greg.txt_campo;
      --
   END f_txt_campo;
   --
   -- ------------------------------------------------------------
   --
   /**
   || Devuelve el valor de la columna cod_error
   */
   FUNCTION f_cod_error        RETURN VARCHAR2
   IS
   BEGIN
      --
      pp_comprueba_error;
      --
      RETURN greg.cod_error;
      --
   END f_cod_error;
   --
   -- ------------------------------------------------------------
   --
   /**
   || Devuelve el valor de la columna txt_error
   */
   FUNCTION f_txt_error        RETURN VARCHAR2
   IS
   BEGIN
      --
      pp_comprueba_error;
      --
      RETURN greg.txt_error;
      --
   END f_txt_error;
   --
   -- ------------------------------------------------------------
   --
   /**
   || Devuelve el valor de la columna fec_actu
   */
   FUNCTION f_fec_actu         RETURN DATE
   IS
   BEGIN
      --
      pp_comprueba_error;
      --
      RETURN greg.fec_actu;
      --
   END f_fec_actu;
   --
   -- ------------------------------------------------------------
   --
   /**
   || Inserta un registro en la tabla
   */
   PROCEDURE p_inserta(p_reg a1004812%ROWTYPE)
   IS
   BEGIN
      --
      INSERT INTO a1004812
      VALUES p_reg;
      --
    --
   END p_inserta;
   --
   -- ------------------------------------------------------------
   --
   /**
   || Inserta el registro pasado como parametro y devuelve el ROWID
   */
   FUNCTION f_inserta(p_reg      IN    a1004812%ROWTYPE)
    --
   RETURN ROWID
   IS
      --
      v_clave     ROWID;
      --
   BEGIN
      --
      INSERT INTO a1004812
           VALUES p_reg
        RETURNING ROWID INTO v_clave;
      --
      RETURN  v_clave;
      --
   END f_inserta;
   --
   -- ------------------------------------------------------------
   --
   /**
   || Modifica un registro en la tabla
   */
   PROCEDURE p_actualiza (p_reg a1004812%ROWTYPE)
   IS
   BEGIN
      --
      UPDATE a1004812
         SET   row = p_reg  
     WHERE 
           idn_int_proc   = p_reg.idn_int_proc  
       AND num_secu_error = p_reg.num_secu_error
          ;
        --
    END p_actualiza;
   --
   -- ------------------------------------------------------------
   --
   /**
   || Modifica un registro en la tabla, por rowid
   */
   PROCEDURE p_actualiza (p_reg a1004812%ROWTYPE,
                        p_rowid         ROWID)
   IS
   BEGIN
      --
      UPDATE a1004812
         SET   row = p_reg     
      WHERE ROWID = p_rowid; 
      --
   END p_actualiza;
   --
   -- ------------------------------------------------------------
   --
   /**
   || Devuelve el registro completo
   */
   FUNCTION f_devuelve_reg RETURN a1004812%ROWTYPE
   IS
   BEGIN
       --
       pp_comprueba_error;
       --
       RETURN greg;
    --
    END f_devuelve_reg;
   --
   --{{ TG_PPUB
   /* -------------------------------------------
   || ! ATENCION ! Codigo PL del usuario         
   || Procedimientos Publicos
   */ -------------------------------------------
   --
   --}} TG_PPUB
   --
   --
END dc_k_prophet_a1004812_trn;
/